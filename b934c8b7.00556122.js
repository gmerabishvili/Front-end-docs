(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{102:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(n),d=r,m=b["".concat(i,".").concat(d)]||b[d]||u[d]||o;return n?a.a.createElement(m,c(c({ref:t},l),{},{components:n})):a.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},140:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/figure-1-3-328b9d8cbc024467d810785912817e87.png"},87:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(7),o=(n(0),n(102)),i={id:"intro",title:"Introduction",sidebar_label:"Introduction"},c={unversionedId:"javascript/intro",id:"javascript/intro",isDocsHomePage:!1,title:"Introduction",description:"Definition",source:"@site/docs/javascript/intro.md",slug:"/javascript/intro",permalink:"/Front-end-docs/docs/javascript/intro",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/javascript/intro.md",version:"current",sidebar_label:"Introduction",sidebar:"someSidebar",previous:{title:"Style Guide",permalink:"/Front-end-docs/docs/"},next:{title:"ES6 Introduction",permalink:"/Front-end-docs/docs/javascript/es6/intro"}},s=[{value:"Definition",id:"definition",children:[]},{value:"Data Types",id:"data-types",children:[{value:"Primitive types",id:"primitive-types",children:[]},{value:"Reference types",id:"reference-types",children:[]}]}],l={toc:s};function p(e){var t=e.components,i=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,i,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"definition"},"Definition"),Object(o.b)("p",null,"JavaScript is high-level, often just-in-time compiled, and multi-paradigm programming language. It has curly-bracket syntax, dynamic typing, prototype-based object-orientation, and first-class functions."),Object(o.b)("p",null,"As a multi-paradigm language, JavaScript supports event-driven, functional, and imperative programming styles. It has application programming interfaces (APIs) for working with text, dates, regular expressions, standard data structures, and the Document Object Model (DOM)."),Object(o.b)("p",null,"JavaScript is a client-side scripting language, which means the source code is processed by the client's web browser rather than on the web server."),Object(o.b)("h2",{id:"data-types"},"Data Types"),Object(o.b)("p",null,"There are two kinds of types in Javascript:  primitive and reference.\n",Object(o.b)("strong",{parentName:"p"},"Primitive types are stored as simple data types"),". ",Object(o.b)("strong",{parentName:"p"},"Reference types are stored as objects, which are really just references\nto locations in memory"),"."),Object(o.b)("h3",{id:"primitive-types"},"Primitive types"),Object(o.b)("p",null,"Primitive types represent simple pieces of data that are stored as is, such as (e.g. boolean true, number 42).\nThere are 6 primitive types in JavaScript: "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Boolean"),Object(o.b)("li",{parentName:"ul"},"Number"),Object(o.b)("li",{parentName:"ul"},"String "),Object(o.b)("li",{parentName:"ul"},"Symbol "),Object(o.b)("li",{parentName:"ul"},"Null "),Object(o.b)("li",{parentName:"ul"},"Undefined")),Object(o.b)("p",null,"A variable holding a primitive directly ",Object(o.b)("strong",{parentName:"p"},"contains")," the primitive value (rather than a pointer to an object).\nWhen you assign a primitive value to a variable, the value is\n",Object(o.b)("strong",{parentName:"p"},"copied")," into that variable. This means that if you set one variable equal\nto another, each variable gets its ",Object(o.b)("strong",{parentName:"p"},"own copy")," of the data. For example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},'var color1 = "red";\nvar color2 = color1;\n')),Object(o.b)("p",null,"Here, even though color1 and color2 contain the same value, they are completely ",Object(o.b)("strong",{parentName:"p"},"separate from each other"),",\nand you can change the value in color1 without affecting color2 and vice versa.\nThat\u2019s because there are ",Object(o.b)("strong",{parentName:"p"},"two different storage locations"),", one for each variable:"),Object(o.b)("p",null,Object(o.b)("img",{alt:"img",src:n(140).default})),Object(o.b)("p",null,"Because each variable containing a primitive value uses its own\nstorage space, changes to one variable ",Object(o.b)("strong",{parentName:"p"},"are not reflected on the other"),".\nYou can think of the variables as ",Object(o.b)("strong",{parentName:"p"},"having no relationship to each other"),".\nFor example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},'var color1 = "red";\nvar color2 = color1;\n\nconsole.log(color1); // "red"\nconsole.log(color2); // "red"\n\ncolor1 = "blue";\n\nconsole.log(color1); // "blue"\nconsole.log(color2); // "red"\n')),Object(o.b)("p",null,'In this code, color1 is changed to "blue" and color2 retains its original\nvalue of "red".'),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Conclusion"),": If the value is a primitive type, when you access the variable, you manipulate the ",Object(o.b)("strong",{parentName:"p"},"actual value")," stored in that variable.\nIn other words, the variable that stores a primitive value is ",Object(o.b)("strong",{parentName:"p"},"accessed by value"),"."),Object(o.b)("h3",{id:"reference-types"},"Reference types"),Object(o.b)("p",null,"Reference types do not store the object directly into the variable to\nwhich it is assigned, instead, ",Object(o.b)("strong",{parentName:"p"},"it holds a pointer (or reference) to\nthe location in memory where the object exists."),"\nThis is the primary difference between objects and primitive values, as the primitive is stored directly in the variable.\nThere are 3 main reference types in JavaScript:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Array"),Object(o.b)("li",{parentName:"ul"},"Object"),Object(o.b)("li",{parentName:"ul"},"Function")),Object(o.b)("p",null,"When you assign an object to a variable, you\u2019re actually assigning a\n",Object(o.b)("strong",{parentName:"p"},"pointer (reference)"),". That means ",Object(o.b)("strong",{parentName:"p"},"if you assign one variable to another, each variable\ngets a copy of the pointer, and both still reference the same object in\nmemory"),". For example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"var object1 = new Object();\nvar object2 = object1;\n")),Object(o.b)("p",null,"This code first creates an object and stores a ",Object(o.b)("strong",{parentName:"p"},"reference")," in\nobject1. Next, object2 is assigned the value of object1. There is still only\nthe ",Object(o.b)("strong",{parentName:"p"},"one instance")," of the object that was created on the first line, but both\nvariables now point to ",Object(o.b)("strong",{parentName:"p"},"that object"),", as illustrated in Figure 1-3."),Object(o.b)("p",null,Object(o.b)("img",{alt:"img",src:n(140).default})),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Conclusion")," If the value is a reference type, when you manipulate an object, you work on the ",Object(o.b)("strong",{parentName:"p"},"reference")," of that object, rather than the actual object.\nIt means a variable that stores an object is ",Object(o.b)("strong",{parentName:"p"},"accessed by reference"),"."))}p.isMDXComponent=!0}}]);